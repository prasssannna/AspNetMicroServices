create an ASP net MicroServices

For Mongo (MONGO RUNS IN DOCKER**************************)
docker ps
	CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
	
docker pull mongo
	Using default tag: latest
	latest: Pulling from library/mongo
	Digest: sha256:3f765972fa2d1d0a748762ba43930f06f0c3ea58986582dd4663fe5ad7b63f0e
	Status: Image is up to date for mongo:latest
	docker.io/library/mongo:latest

docker run -d -p 27017:27017 --name shopping-mongo mongo
	b6e4767769fdc458b8ea6b059fcb0c0d046a3d43c1b08e93958794253bcb5e77
docker ps
	CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                      NAMES
	b6e4767769fd   mongo     "docker-entrypoint.s…"   15 seconds ago   Up 11 seconds   0.0.0.0:27017->27017/tcp   shopping-mongo

	To run mongo commands
	 docker exec -it  shopping-mongo /bin/bash
 
	docker ps -a will give all available containers.
	 you just have choose one and run it
	docker start {hash}
1
-- Now we can open interactive terminal for mongo

docker exec -it shopping-mongo /bin/bash


2
-- After that, we are able to run mongo commands. 
Let me try with 

 - create database
 - create collection
 - add items into collection
 - list collection


ls
mongo
show dbs
use CatalogDb  --> for create db on mongo
db.createCollection('Products')  --> for create people collection

db.Products.insertMany([
			    {
			        "Name": "Asus Laptop",
			        "Category": "Computers",
			        "Summary": "Summary",
			        "Description": "Description",
			        "ImageFile": "ImageFile",
			        "Price": 54.93
			    },
			    {
			        "Name": "HP Laptop",
			        "Category": "Computers",
			        "Summary": "Summary",
			        "Description": "Description",
			        "ImageFile": "ImageFile",
			        "Price": 88.93
			    }
			])

db.Products.find({}).pretty()
db.Products.remove({})

show databases
show collections
db.Products.find({}).pretty()

Repository pattern is used for catalogs
An abstractin Between DB and business is created which help to mock data for testing

API -> Business Obj --> Repository --> Database

Here repository could be Mock or db repo

1. Install mongo db driver
2. Create repository for a particular collection
3. Add CRUD ops
4. Create a context and use it in contoller
5. Inject all these repo and context

So -> Controller -> CatalogContext --> Product repository

Create docker compose file
1. You can select a project and create a orchestrar
docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d

For REDIS
docker run -d -p 6379:6379 --name aspnetrun-redis redis
Install using nugit

install-package Microsoft.Extensions.Caching.StackExchangeRedis
update-package -ProjectName Basket.API

For JSON
install newtosoft json

Sample REDIS cmds

 redis-cli
127.0.0.1:6379> ping
PONG
127.0.0.1:6379> set a 12
OK
127.0.0.1:6379> get a
"12"
127.0.0.1:6379> set name pras
OK
127.0.0.1:6379> get name
"pras"
127.0.0.1:6379>

